{
  "name": "escomplex",
  "version": "1.2.0",
  "description": "Software complexity analysis of JavaScript-family abstract syntax trees.",
  "homepage": "https://github.com/philbooth/escomplex",
  "bugs": {
    "url": "https://github.com/philbooth/escomplex/issues"
  },
  "license": "MIT",
  "author": {
    "name": "Phil Booth",
    "email": "pmbooth@gmail.com",
    "url": "https://github.com/philbooth"
  },
  "main": "./src",
  "repository": {
    "type": "git",
    "url": "https://github.com/philbooth/escomplex.git"
  },
  "keywords": [
    "escomplex",
    "complexity",
    "simplicity",
    "cyclomatic",
    "halstead",
    "maintainability",
    "dependencies",
    "static",
    "analysis",
    "metrics",
    "esprima",
    "acorn",
    "ast"
  ],
  "dependencies": {
    "check-types": "2.1.x",
    "matrix-utilities": "1.2.x"
  },
  "devDependencies": {
    "jshint": "2.1.x",
    "mocha": "1.13.x",
    "chai": "1.8.x",
    "escomplex-ast-moz": "0.1.x",
    "esprima": "1.0.x"
  },
  "scripts": {
    "lint": "./node_modules/jshint/bin/jshint src --config config/jshint.json",
    "test": "npm run test-module && npm run test-project",
    "test-module": "./node_modules/mocha/bin/mocha --ui tdd --reporter spec --colors test/module",
    "test-project": "./node_modules/mocha/bin/mocha --ui tdd --reporter spec --colors test/project"
  },
  "contributors": [
    {
      "name": "Phil Booth",
      "email": "pmbooth@gmail.com",
      "url": "https://github.com/philbooth"
    },
    {
      "name": "Juzer Ali",
      "url": "https://github.com/juzerali"
    },
    {
      "name": "Mark Trostler",
      "url": "https://github.com/zzo"
    },
    {
      "name": "Wyatt Preul",
      "url": "https://github.com/wpreul"
    },
    {
      "name": "Rowan Manning",
      "url": "https://github.com/rowanmanning"
    },
    {
      "name": "Andrew Pennebaker",
      "url": "https://github.com/mcandre"
    },
    {
      "name": "Nils Kenneweg",
      "url": "https://github.com/nkenneweg"
    },
    {
      "name": "Eric Burin des Roziers",
      "url": "https://github.com/Ericbdr"
    },
    {
      "name": "Tim Ruffles",
      "url": "https://github.com/timruffles"
    },
    {
      "name": "Will Boyd",
      "url": "https://github.com/lonekorean"
    },
    {
      "name": "Addison Higham",
      "url": "https://github.com/addisonj"
    }
  ],
  "readme": "# escomplex\n\n[![Build status][ci-image]][ci-status]\n\nSoftware complexity analysis\nof JavaScript-family abstract syntax trees.\nThe back-end for [complexity-report].\n\n* [Abstract syntax trees](#abstract-syntax-trees)\n* [Syntax tree walkers](#syntax-tree-walkers)\n* [Metrics](#metrics)\n* [Links to research](#links-to-research)\n* [Installation](#installation)\n* [Usage](#usage)\n    * [Arguments](#arguments)\n        * [ast](#ast)\n        * [walker](#walker)\n        * [options](#options)\n    * [Result](#result)\n        * [For a single module](#for-a-single-module)\n        * [For multiple modules](#for-multiple-modules)\n* [Related projects](#related-projects)\n* [Development](#development)\n* [License](#license)\n\n## Abstract syntax trees\n\nThis library deliberately excludes\nlogic for parsing source code\nand for navigating parse trees.\nBoth the syntax tree\nand a matching [syntax tree walker](#syntax-tree-walkers)\nare inputs to escomplex,\nmeaning it is not tied\nto any particular language,\nparser\nor data format.\n\n## Syntax tree walkers\n\n* [escomplex-ast-moz]:\n  Walks syntax trees\n  that conform to the format\n  defined in Mozilla's [Parser API][api].\n  This format is returned\n  by [Esprima]\n  and [Acorn],\n  two popular JavaScript parsers.\n\n## Metrics\n\nCurrently the library reports on:\n\n* Lines of code:\n  Both physical (the number of lines in a module or function)\n  and logical (a count of the imperative statements).\n  A crude measure.\n* Number of parameters:\n  Analysed statically\n  from the function signature,\n  so no accounting is made\n  for functions that rely on the `arguments` object.\n  Lower is better.\n* Cyclomatic complexity:\n  Defined by Thomas J. McCabe in 1976,\n  this is a count of the number of cycles\n  in the program flow control graph.\n  Effectively the number of distinct paths\n  through a block of code.\n  Lower is better.\n* Cyclomatic complexity density:\n  Proposed as a modification\n  to cyclomatic complexity\n  by Geoffrey K. Gill and Chris F. Kemerer in 1991,\n  this metric simply re-expresses it\n  as a percentage of the logical lines of code.\n  Lower is better.\n* Halstead metrics:\n  Defined by Maurice Halstead in 1977,\n  these metrics are calculated\n  from the numbers of operators\n  and operands in each function.\n  Lower is better.\n* Maintainability index:\n  Defined by Paul Oman & Jack Hagemeister in 1991,\n  this is a logarithmic scale\n  from negative infinity to 171,\n  calculated from\n  the logical lines of code,\n  the cyclomatix complexity\n  and the Halstead effort.\n  Higher is better.\n* Dependencies:\n  A count of the calls\n  to CommonJS and AMD `require`.\n  Analysed statically\n  from the function signature,\n  so no accounting is made\n  for dynamic calls\n  where a variable or function is\n  obscuring the nature of the dependency.\n  Lower is better.\n* First-order density:\n  The percentage of all possible internal dependencies\n  that are actually realised in the project.\n  Lower is better.\n* Change cost:\n  The percentage of modules affected,\n  on average,\n  when one module in the project\n  is changed.\n  Lower is better.\n* Core size:\n  The percentage of modules\n  that are both widely depended on\n  and themselves depend on other modules.\n  Lower is better.\n\nIt is important to note\nthat none of these metrics\ncan compete with the insight\nof a competent developer.\nAt best,\nthey are an automatable warning system,\nwhich can help to identify areas of code\nthat warrant closer inspection\nby a human being.\n\n## Links to research\n\n* [A Complexity Measure][mccabe],\n  by Thomas J McCabe.\n* [Cyclomatic Complexity Density and Software Maintenance Productivity][gillkemerer],\n  by Geoffrey K. Gill and Chris F. Kemerer.\n* [Resolving the Mysteries of the Halstead Measures][horstzuse],\n  by Horst Zuse.\n* [Exploring the Structure of Complex Software Designs: An Empirical Study of Open Source and Proprietary Code][dsm],\n  by Alan MacCormack, John Rusnak and Carliss Baldwin.\n* [The Impact of Software Design Structure on Product Maintenance Costs and Measurement of Economic Benefits of Product Redesign][akaikine],\n  by Andrei Akaikine.\n* [A Systematic Review of Software Maintainability Prediction and Metrics][review],\n  by Mehwish Riaz, Emilia Mendes and Ewan Tempero.\n\n## Installation\n\nThe library is published on npm\nunder the name `escomplex`.\nTo install,\nyou can add it to the dependencies\nin your `package.json` file\nor simply run:\n\n```\nnpm install escomplex\n```\n\n## Usage\n\nYou can load escomplex\nin your own code\nby calling `require`:\n\n```javascript\nvar escomplex = require('escomplex');\n```\n\nescomplex exports two primary functions,\n`analyze` and `processResults`\n\n### anaylze\n\n```javascript\nvar result = escomplex.analyse(ast, walker, options);\n```\n\n#### Arguments\n\n##### ast\n\nThe first argument, `ast`,\nmust be either\nan abstract syntax tree\nor an array of syntax trees.\nIf it is an array,\neach tree should include\nan extra property, `path`,\nthat is either a relative or full path\nto the equivalent module on disk.\nAs well as identifying\neach of the result objects,\nthat path is also used\nduring dependency analysis.\n\n##### walker\n\nThe second argument, `walker`,\nmust be a [syntax tree walker](#syntax-tree-walkers).\n\n##### options\n\nThe third argument, `options`,\nis an optional object\ncontaining properties that modify\nsome of the complexity calculations:\n\n* `options.logicalor`:\n  Boolean indicating whether operator `||`\n  should be considered a source of cyclomatic complexity,\n  defaults to `true`.\n* `options.switchcase`:\n  Boolean indicating whether `switch` statements\n  should be considered a source of cyclomatic complexity,\n  defaults to `true`.\n* `options.forin`:\n  Boolean indicating whether `for`...`in` loops\n  should be considered a source of cyclomatic complexity,\n  defaults to `false`.\n* `options.trycatch`:\n  Boolean indicating whether `catch` clauses\n  should be considered a source of cyclomatic complexity,\n  defaults to `false`.\n* `options.newmi`:\n  Boolean indicating whether the maintainability\n  index should be rebased on a scale from 0 to 100,\n  defaults to `false`.\n* `options.skipCalculation`:\n  *only valid for when ast is an array of files*\n  Boolean indicating if we should skip processing of certain values,\n  such as the adjacency and visibility matrixes,\n  core sizes, and average values loc, etc.\n* `options.noCoreSize`:\n  Skips creating the visibility matrix and calculating the coreSize,\n  which can be very expensive for large projects\n\n### processResults\n\n``` javascript\nescomplex.processResults(result, false);\n```\n\nThis function takes a report object\nand computes aggregate scores for all individual files\nand also adjacency and visibility matrices.\nThis is useful for combining together multiple report objects\n(say from different languages)\nand recomputing aggregate scores.\n\n#### Arguments\n\n##### Result\nA result object of the form:\n\n```JavaScript\nvar result = {\n  reports: [\n    {\n      // same format as module return\n    }\n  ]\n}\n```\n\n#### noCoreSize\na boolean indicating not to calculate the visibilityMatrix or core size\n\n\n### Result Format\nBoth `analyze` and `processResults`\nreturn a report of the following format,\nwith some variation depending on the given options.\n\n#### For a single module\n\nIf a single abstract syntax tree object\nis passed in the `ast` argument,\nthe result will be a report object\nthat looks like the following:\n\n```javascript\n{\n    maintainability: 171,\n    dependencies: [],\n    aggregate: {\n        sloc: {\n            logical: 0,\n            physical: 0\n        },\n        params: 0,\n        cyclomatic: 1,\n        cyclomaticDensity: 1,\n        halstead: {\n            vocabulary: 0,\n            difficulty: 0,\n            volume: 0,\n            effort: 0,\n            bugs: 0,\n            time: 0\n        }\n    },\n    functions: [\n        {\n            name: '',\n            line: 0,\n            sloc: {\n                logical: 0,\n                physical: 0\n            },\n            params: 0,\n            cyclomatic: 1,\n            cyclomaticDensity: 1,\n            halstead: {\n                vocabulary: 0,\n                difficulty: 0,\n                volume: 0,\n                effort: 0,\n                bugs: 0,\n                time: 0\n            }\n        },\n        ...\n    ]\n}\n```\n\nThe meaning of those values, briefly,\nis as follows\n(see [metrics](#metrics)\nfor more information\non each one):\n\n* `report.maintainability`:\n  The maintainability index for the module.\n* `report.dependencies`:\n  The array of CommonJS/AMD dependencies for the module.\n* `report.aggregate.sloc.physical`:\n  Physical lines of code for the module.\n  Will be `undefined`\n  if the syntax tree\n  is not annotated\n  with line number data.\n* `report.aggregate.sloc.logical`:\n  Logical lines of code for the module.\n* `report.aggregate.params`:\n  Parameter count for the module.\n* `report.aggregate.cyclomatic`:\n  Cyclomatic complexity for the module.\n* `report.aggregate.cyclomaticDensity`:\n  Cyclomatic complexity density for the module.\n* `report.aggregate.halstead.vocabulary`:\n  Halstead vocabulary size for the module.\n* `report.aggregate.halstead.difficulty`:\n  Halstead difficulty for the module.\n* `report.aggregate.halstead.volume`:\n  Halstead volume for the module.\n* `report.aggregate.halstead.effort`:\n  Halstead effort for the module.\n* `report.aggregate.halstead.bugs`:\n  Halstead bugs for the module.\n* `report.aggregate.halstead.time`:\n  Halstead time for the module.\n* `report.functions[n].name`:\n  Function name.\n* `report.functions[n].line`:\n  Line number that the function starts on.\n  Will be `undefined`\n  if the syntax tree\n  is not annotated\n  with line number data.\n* `report.functions[n].sloc.physical`:\n  Physical lines of code for the function.\n  Will be `undefined`\n  if the syntax tree\n  is not annotated\n  with line number data.\n* `report.functions[n].sloc.logical`:\n  Logical lines of code for the function.\n* `report.functions[n].params`:\n  Parameter count for the function.\n* `report.functions[n].cyclomatic`:\n  Cyclomatic complexity for the function.\n* `report.functions[n].cyclomaticDensity`:\n  Cyclomatic complexity density for the function.\n* `report.functions[n].halstead.vocabulary`:\n  Halstead vocabulary size for the function.\n* `report.functions[n].halstead.difficulty`:\n  Halstead difficulty for the function.\n* `report.functions[n].halstead.volume`:\n  Halstead volume for the function.\n* `report.functions[n].halstead.effort`:\n  Halstead effort for the function.\n* `report.functions[n].halstead.bugs`:\n  Halstead bugs for the function.\n* `report.functions[n].halstead.time`:\n  Halstead time for the function.\n\n#### For multiple modules\n\nIf an array of syntax trees\nis passed in the `ast` argument,\nthe result will be an object\nthat looks like the following:\n\n```javascript\n{\n    reports: [\n        ...\n    ],\n    adjacencyMatrix: [\n        [ 0 ]\n    ],\n    firstOrderDensity: 0,\n    visibilityMatrix: [\n        [ 0 ]\n    ],\n    changeCost: 100,\n    coreSize: 100,\n    loc: 0,\n    cyclomatic: 1,\n    effort: 0,\n    params: 0,\n    maintainability: 171\n}\n```\n\nThose properties\nare defined as follows:\n\n* `result.reports`:\n  An array of report objects,\n  each one in the same format\n  [described above](#for-a-single-module)\n  but with an extra property `path`\n  that matches the `path` property\n  from its corresponding syntax tree.\n  This `path` property is required\n  because the reports array gets sorted\n  during dependency analysis.\n* `result.adjacencyMatrix`:\n  The adjacency\n  design structure matrix (DSM)\n  for the project.\n  This is a two-dimensional array,\n  each dimension with the same order and length\n  as the `reports` array.\n  Each row and column\n  represents its equivalent\n  indexed module\n  from the `reports` array,\n  with values along the horizontal\n  being `1`\n  when that module\n  directly depends on another\n  and values along the vertical\n  being `1`\n  when that module\n  is directly depended on by another.\n  All other values are `0`.\n* `result.firstOrderDensity`:\n  The first-order density for the project.\n* `result.visibilityMatrix`:\n  The visibility DSM for the project.\n  Like the adjacency matrix,\n  but expanded to incorporate\n  indirect dependencies.\n  Will be missing if `noCoreSize` is passed\n  as an option.\n* `result.changeCost`:\n  The change cost for the project.\n  Will be missing if `noCoreSize` is passed\n  as an option.\n* `result.coreSize`:\n  The core size for the project.\n* `result.loc`:\n  The average per-function\n  count of logical lines of code.\n* `result.cyclomatic`:\n  The average per-function\n  cyclomatic complexity.\n* `result.effort`:\n  The average per-function\n  Halstead effort.\n* `result.params`:\n  The average per-function\n  parameter count.\n* `result.maintainability`:\n  The average per-module\n  maintainability index.\n\n## Related projects\n\n* [plato]:\n  JavaScript source code visualization, static analysis, and complexity tool.\n* [jsc]:\n  JavaScript source code complexity tool.\n* [bob]:\n  Minimalist-omakase build tool for node.js projects.\n* [cardio]:\n  A web application health tool.\n* [grunt-complexity][grunt]:\n  A JavaScript complexity analysis grunt task.\n* [brackets-crjs][brackets]:\n  Brackets extension.\n* [jscomplexity]:\n  JS cyclomatic complexity report generator.\n* [karma-complexity-processor][karma]:\n  A preprocessor for karma runner to give some metrics about code complexity.\n* [crlint]:\n  JS linter based on complexity report results.\n\n## Development\n\nRefer to the [contrubution guidelines][contributions]\nbefore submitting a pull request.\n\nSource code is in `/src`.\nUnit tests are in `/test`.\nYou can run the tests with `npm test`.\nYou can run the linter with `npm run lint`.\nMake sure you've installed\nall the dependencies\nwith `npm install`\nfirst.\n\n## License\n\n[MIT][license]\n\n[ci-image]: https://secure.travis-ci.org/philbooth/escomplex.png?branch=master\n[ci-status]: http://travis-ci.org/#!/philbooth/escomplex\n[complexity-report]: https://github.com/philbooth/complexity-report\n[escomplex-ast-moz]: https://github.com/philbooth/escomplex-ast-moz\n[api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n[esprima]: http://esprima.org/\n[acorn]: http://marijnhaverbeke.nl/acorn\n[mccabe]: http://www.literateprogramming.com/mccabe.pdf\n[gillkemerer]: http://www.pitt.edu/~ckemerer/CK%20research%20papers/CyclomaticComplexityDensity_GillKemerer91.pdf\n[horstzuse]: http://horst-zuse.homepage.t-online.de/z-halstead-final-05-1.pdf\n[dsm]: http://www.people.hbs.edu/cbaldwin/DR2/MRBDesignStructure17thSep1.pdf\n[akaikine]: http://sdm.mit.edu/docs/akaikine_thesis.pdf\n[review]: http://www.rose-hulman.edu/Users/faculty/young/CS-Classes/csse575/Resources/maintainabilityMeas05314233.pdf\n[plato]: https://github.com/es-analysis/plato\n[jsc]: https://github.com/bahmutov/js-complexity-viz\n[bob]: https://github.com/cliffano/bob\n[cardio]: https://github.com/auchenberg/cardio\n[grunt]: https://github.com/vigetlabs/grunt-complexity\n[brackets]: https://github.com/sahlas/brackets-crjs\n[jscomplexity]: https://github.com/slyg/jscomplexity\n[karma]: https://github.com/lorenzofox3/karma-complexity-preprocessor\n[crlint]: https://github.com/spion/crlint.js\n[contributions]: https://github.com/philbooth/escomplex/blob/master/CONTRIBUTING.md\n[license]: https://github.com/philbooth/escomplex/blob/master/COPYING\n\n",
  "readmeFilename": "README.md",
  "_id": "escomplex@1.2.0",
  "_from": "escomplex@1.2.x"
}
